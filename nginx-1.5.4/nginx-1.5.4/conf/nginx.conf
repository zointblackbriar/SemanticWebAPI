worker_processes 16;


events { worker_connections 1024; accept_mutex off;}
#thread_pool default threads=32 max_queue=65536;


http {

	proxy_connect_timeout 300s;
	proxy_read_timeout 300s;
	#aio threads=default;


	server {
		listen 8060;
		#add_header X-Request-ID $request_id;
		#proxy_set_header X-Request-ID $request_id;
		#listen [::]:80 ipv6only=on;
		access_log off;
		#sendfile on;
		#sendfile_max_chunk 512k;

		#access_log ../logs/access.log upstreamlog;
		#return 301 https://$host$request_uri;
		return 444;
	}

	server {
		#listen 443 ssl http2 default_server;
		#listen [::]:443 ssl http2 default_server;

		ssl_certificate ../cert.pem;
		ssl_certificate_key ../cert.key;

		

		#keepalive_timeout 0;
		location / {
				try_files  $uri $uri/  @mongrel;

		}
		
		location /integratedstaticmessage {
			try_files  $uri $uri/  @questionmodule;
		}
		
		location /integrateddynamicmessage {
			try_files  $uri $uri/  @questionmodule;
		}
		
		location /fraunhoferengine {
			try_files  $uri $uri/  @questionmodule;
		}

		
		location @mongrel {
			proxy_http_version 1.1;
			#proxy_set_header Authorization $http_x_api_token;
			#proxy_temp_file_write_size 64k;
			#proxy_connect_timeout 10080s;
			#proxy_send_timeout 10080;
			#proxy_read_timeout 10080;
			#proxy_buffer_size 64k;
			#proxy_buffers 16 32k;
			#proxy_busy_buffers_size 64k;
			#proxy_redirect off;
			#proxy_request_buffering off;
			#proxy_buffering off;
			#keepalive_requests 2000;
			proxy_pass http://backend;


			#proxy_next_upstream http_404;
			#health_check;
			#context:  http, server, location ;

		}
		location @questionmodule {
			proxy_http_version 1.1;
			proxy_pass http://questionanswering;


			#proxy_next_upstream http_404;
			#health_check;
			#context:  http, server, location ;

		}


	}

	upstream backend {
		#max_fails=3 fail_timeout=60s
		least_conn;
		#hash $cookie_sessionID;
		#server 127.0.0.1:4002 weight=5;
		#server 127.0.0.1:4003 weight=4;
		#server 127.0.0.1:4001 weight=3;
		#server 127.0.0.1:4000 weight=2;
		server 127.0.0.1:4002;
		server 127.0.0.1:4003;
		server 127.0.0.1:4001;
		server 127.0.0.1:4000;
		
		#marks the server as a backup server. It will be passed requests when the primary servers are unavailable
		#server 127.0.0.1:4001 backup;
		#keepalive 16;
	}
	
	upstream questionanswering {
		least_conn;
		server 127.0.0.1:5000;
	}


}

